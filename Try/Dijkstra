# 最短路径
import heapq
import matplotlib.pyplot as plt
import networkx as nx


def dijkstra(graph, start):
    # 初始化
    distances = {node: float('inf') for node in graph}
    # 起点到起点的距离为0
    distances[start] = 0
    # 优先队列
    priority_queue = [(0, start)]
    shortest_path = {}
    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)
        # 如果当前节点到起点的距离大于已经记录的距离，则跳过
        if current_distance > distances[current_node]:
            continue
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            # 如果找到更短路径
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
                shortest_path[neighbor] = current_node
    return distances, shortest_path


if __name__ == '__main__':
    graph = {
        'A': {'B': 5, 'C': 1},
        'B': {'A': 5, 'C': 2, 'D': 1},
        'C': {'A': 1, 'B': 2, 'D': 4, 'E': 8},
        'D': {'B': 1, 'C': 4, 'E': 3, 'F': 6},
        'E': {'C': 8, 'D': 3},
        'F': {'D': 6}
    }
    # 运行算法
    start_node = 'A'
    distance, shortest_path = dijkstra(graph, start_node)
    # 打印结果
    print("the shortest distance from A")
    for node, dis in distance.items():
        print(f"the shortest distance from {start_node} to {node} is {dis}")

    # 可视化图
    G = nx.Graph()
    G.add_nodes_from(graph.keys())
    for node, edges in graph.items():
        for edge, weight in edges.items():
            G.add_edge(node, edge, weight=weight)
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, node_size=2000, node_color='g', font_size=20, font_weight='bold', )
    labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
    plt.title = "delivery_map"
    plt.show()
